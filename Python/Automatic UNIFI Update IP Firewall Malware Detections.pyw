import requests
import csv
import io
from ipaddress import ip_address
import re
import os
import urllib3
from cryptography.fernet import Fernet

# Disable warnings for unverified HTTPS requests
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Setup for decrypting an environment variable
key = b'RANDOMKEY'
cipher_suite = Fernet(key)
cipher_text = os.environ.get('UNIFI_PASSWORD').encode('utf-8')
plain_text = cipher_suite.decrypt(cipher_text).decode('utf-8')

# Variables for constructing URLs
controller_ip = "IPADDRESS"
controller_port = "PORT"
site_id = "default"
rule_id = "RULEID"
username = "EMAIL/USERNAME"

# Constructed URLs using variables
base_url = f"https://{controller_ip}:{controller_port}"
login_url = f"{base_url}/api/auth/login"
api_endpoint = f"{base_url}/proxy/network/v2/api/site/{site_id}/trafficrules/{rule_id}"

# Feodo Tracker URL for downloading the blocklist
url = "https://feodotracker.abuse.ch/downloads/ipblocklist.csv"

login_data = {
    "username": username,
    "password": plain_text
}

# Start a session and attempt to log in
session = requests.Session()
login_response = session.post(login_url, json=login_data, headers={'Content-Type': 'application/json'}, verify=False)

if login_response.status_code == 200:
    csrf_token = login_response.headers.get('X-Csrf-Token', '')
else:
    print("Failed to log in to the UniFi controller.")
    exit(1)

# Retrieve the CSV data from Feodo Tracker
response = session.get(url)
if response.status_code == 200:
    csv_data = response.text
else:
    print("Failed to retrieve the CSV data.")
    exit(1)

# Parse CSV data for IP addresses
blocked_ips = []
pattern = re.compile(r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b')
csv_reader = csv.reader(io.StringIO(csv_data))
for row in csv_reader:
    if len(row) >= 2:
        ip_address_block = row[1]
        if pattern.match(ip_address_block):
            blocked_ips.append(ip_address_block)

# Validate IP addresses
for ip in blocked_ips:
    try:
        ip_address(ip)
    except ValueError:
        print(f"Invalid IP: {ip}")

# Prepare the data for updating the traffic rule
rule_data = {
    "action": "BLOCK",
    "ip_addresses": [{"ip_or_subnet": ip, "ip_version": "v4"} for ip in blocked_ips],
    "matching_target": "IP",
    "target_devices": [{"type": "ALL_CLIENTS"}],
    "enabled": True
}

headers = {
    'Content-Type': 'application/json',
    'X-Csrf-Token': csrf_token
}

# Attempt to update the traffic rule
response = session.put(api_endpoint, json=rule_data, headers=headers, verify=False)

if response.status_code == 200:
    print("Traffic rule updated successfully.")
else:
    print("Failed to update the traffic rule.")
    print(response.text)
